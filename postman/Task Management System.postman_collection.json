{
	"info": {
		"_postman_id": "575e1abe-5512-4ebe-8eae-05139c946815",
		"name": "Task Management System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25192246"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Peter registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Get username user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql('spidy@rambler.ru');\r",
									"})\r",
									"\r",
									"pm.test('Get name user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql('Peter');\r",
									"});\r",
									"\r",
									"pm.test('Get last name user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).to.eql('Parker');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"parker_id_tms\",jsonData.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\":\"Peter\",\r\n    \"lastName\": \"Parker\",\r\n    \"email\": \"spidy@rambler.ru\",\r\n    \"password\": \"54321\",\r\n    \"passwordConfirmation\": \"54321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_tms}}auth/registration",
							"host": [
								"{{base_url_tms}}auth"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": [
						{
							"name": "Peter registration",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Peter\",\r\n    \"secondName\": \"Ben\",\r\n    \"lastName\": \"Parker\",\r\n    \"username\": \"spidy@rambler.ru\",\r\n    \"password\": \"54321\",\r\n    \"passwordConfirmation\": \"54321\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/v1/auth/registration",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"auth",
										"registration"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 12 Dec 2023 05:06:13 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": -46,\n    \"name\": \"Peter\",\n    \"secondName\": \"Ben\",\n    \"lastName\": \"Parker\",\n    \"username\": \"spidy@rambler.ru\"\n}"
						}
					]
				},
				{
					"name": "new user Peter logining",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"parker_id_tms\"))).to.eql(jsonData.id);\r",
									"})\r",
									"\r",
									"pm.test('Get name user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql('spidy@rambler.ru');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.collectionVariables.set(\"refresh_bearer_token_tms\", jsonData.refreshToken);\r",
									"pm.collectionVariables.set(\"access_bearer_token_tms\", jsonData.accessToken);\r",
									"\r",
									"pm.test('check access token from global env', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.accessToken).to.eql(pm.collectionVariables.get(\"access_bearer_token_tms\"));\r",
									"});\r",
									"\r",
									"pm.test('check refresh token from global env', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.refreshToken).to.eql(pm.collectionVariables.get(\"refresh_bearer_token_tms\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"spidy@rambler.ru\",\r\n    \"password\":\"54321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_tms}}auth/login",
							"host": [
								"{{base_url_tms}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Peter logining",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"spidy@rambler.ru\",\r\n    \"password\":\"54321\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/v1/auth/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 12 Dec 2023 05:26:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": -43,\n    \"username\": \"spidy@rambler.ru\",\n    \"accessToken\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzcGlkeUByYW1ibGVyLnJ1IiwiaWQiOi00Mywicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwMjM2MjQwOH0.e_vH-rk4XwY-u5X8gJeyylkzuBgxBZLMKMLobFA9M9hj9rLIAOFP_c_3ovuIAIJnlcoTArlmYSNNI-SMSbYYxw\",\n    \"refreshToken\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzcGlkeUByYW1ibGVyLnJ1IiwiaWQiOi00MywiZXhwIjoxNzA0OTUwODA4fQ.oXxHptKQWAz3QoXMqCi2_sTAdOa4nmkWP6lXK1FOvZ58TfHfI9aq_45Qch5UXx3a0Lc5bIIQsfzKTVjLCDnZjw\"\n}"
						}
					]
				},
				{
					"name": "refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"parker_id_tms\"))).to.eql(jsonData.id);\r",
									"})\r",
									"\r",
									"pm.test('Get name user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql('spidy@rambler.ru');\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_bearer_token_tms\",jsonData.accessToken);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"refresh_bearer_token_tms\",jsonData.refreshToken);\r",
									"\r",
									"pm.test('check access token from global env', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.accessToken).to.eql(pm.collectionVariables.get(\"access_bearer_token_tms\"));\r",
									"});\r",
									"\r",
									"pm.test('check refresh token from global env', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.refreshToken).to.eql(pm.collectionVariables.get(\"refresh_bearer_token_tms\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_bearer_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{refresh_bearer_token_tms}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_tms}}auth/refresh",
							"host": [
								"{{base_url_tms}}auth"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"parker_id_tms\"))).to.eql(jsonData.id);\r",
									"})\r",
									"\r",
									"pm.test('Check email', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(\"spidy@rambler.ru\").to.eql(jsonData.email);\r",
									"})\r",
									"\r",
									"pm.test('Check firstName', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(\"Peter\").to.eql(jsonData.firstName);\r",
									"})\r",
									"\r",
									"pm.test('Check lastName', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(\"Parker\").to.eql(jsonData.lastName);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_tms}}user/{{parker_id_tms}}",
							"host": [
								"{{base_url_tms}}user"
							],
							"path": [
								"{{parker_id_tms}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_bearer_token_tms}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"if(pm.response.to.have.status(200)) {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"last_added_task_id\",jsonData.id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_bearer_token_tms}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ENV_access_bearer_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Get spiderweb\",\r\n  \"description\": \"Try new recipe of spiderweb\",\r\n  \"status\": \"PENDING\",\r\n  \"priority\": \"MEDIUM\",\r\n  \"assigneeId\": {{parker_id_tms}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_tms}}tasks",
							"host": [
								"{{base_url_tms}}tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get task by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"last_added_task_id\"))).to.eql(jsonData.id);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_tms}}tasks/{{last_added_task_id}}",
							"host": [
								"{{base_url_tms}}tasks"
							],
							"path": [
								"{{last_added_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Get task id', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get('last_added_task_id')));\r",
									"})\r",
									"\r",
									"pm.test('Get title', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"Updated title\");\r",
									"});\r",
									"\r",
									"pm.test('Get description', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.description).to.eql(\"Updated description\");\r",
									"});\r",
									"\r",
									"pm.test('Get status', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"IN_PROGRESS\");\r",
									"});\r",
									"\r",
									"pm.test('Get priority', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.priority).to.eql(\"LOW\");\r",
									"});\r",
									"\r",
									"pm.test('Get assigneeId', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.assigneeId).to.eql(parseInt(pm.collectionVariables.get('parker_id_tms')));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_bearer_token_tms}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ENV_access_bearer_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{last_added_task_id}},\r\n  \"title\": \"Updated title\",\r\n   \"description\": \"Updated description\",\r\n  \"status\": \"IN_PROGRESS\",\r\n  \"priority\": \"LOW\",\r\n  \"authorId\": {{parker_id_tms}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_tms}}tasks",
							"host": [
								"{{base_url_tms}}tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all tasks by default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check content', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.content.length).to.eql(2)\r",
									"});\r",
									"\r",
									"pm.test('Check content', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"first_added_task_id\")))\r",
									".to.eql(jsonData.content[1].id)\r",
									"});\r",
									"\r",
									"// pm.test('Check ID', function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"// pm.expect(parseInt(pm.collectionVariables.get(\"last_added_task_id\"))).to.eql(jsonData.id);\r",
									"// })\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_tms}}tasks",
							"host": [
								"{{base_url_tms}}tasks"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "2",
									"disabled": true
								},
								{
									"key": "pageNumber",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all tasks by assignee id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"last_added_task_id\"))).to.eql(jsonData.id);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_tms}}tasks?assigneeId={{parker_id_tms}}",
							"host": [
								"{{base_url_tms}}tasks"
							],
							"query": [
								{
									"key": "assigneeId",
									"value": "{{parker_id_tms}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_bearer_token_tms}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create new comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Get taskId', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.taskId).to.eql(parseInt(pm.collectionVariables.get(\"last_added_task_id\")));\r",
									"})\r",
									"\r",
									"pm.test('Get name user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(parseInt(pm.collectionVariables.get(\"parker_id_tms\")));\r",
									"});\r",
									"\r",
									"pm.test('Get text', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.text).to.eql('A bla-bla-bla');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_bearer_token_tms}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ENV_access_bearer_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"A bla-bla-bla\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_tms}}comments/{{last_added_task_id}}",
							"host": [
								"{{base_url_tms}}comments"
							],
							"path": [
								"{{last_added_task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all tasks by author id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Check task ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"last_added_task_id\"))).to.eql(jsonData[0].taskId);\r",
									"})\r",
									"\r",
									"pm.test('Check user ID', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"pm.expect(parseInt(pm.collectionVariables.get(\"parker_id_tms\"))).to.eql(jsonData[0].userId);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_tms}}comments/{{last_added_task_id}}",
							"host": [
								"{{base_url_tms}}comments"
							],
							"path": [
								"{{last_added_task_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_bearer_token_tms}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "negativTests",
			"item": [
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create new comments with null in text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"})\r",
											"\r",
											"pm.test('Get taskId', function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Validation failed\");\r",
											"})\r",
											"\r",
											"pm.test('Get name user', function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors.text).to.eql(\"Text of comment must be not null\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_bearer_token_tms}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ENV_access_bearer_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_tms}}comments/{{last_added_task_id}}",
									"host": [
										"{{base_url_tms}}comments"
									],
									"path": [
										"{{last_added_task_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comments with short text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"})\r",
											"\r",
											"pm.test('Validation failed', function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql('Validation failed');\r",
											"})\r",
											"\r",
											"pm.test('Validation failed text', function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors.text).to.eql('Text must be less than 1024 symbols and more then 4');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_bearer_token_tms}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ENV_access_bearer_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_tms}}comments/{{last_added_task_id}}",
									"host": [
										"{{base_url_tms}}comments"
									],
									"path": [
										"{{last_added_task_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Peter  double registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test('Get username user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql('User with this username already exists');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Peter\",\r\n    \"fatherName\": \"Ben\",\r\n    \"lastname\": \"Parker\",\r\n    \"username\": \"spidy@rambler.ru\",\r\n    \"password\": \"54321\",\r\n    \"passwordConfirmation\": \"54321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/registration",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Double registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"John\",\r\n    \"lastName\": \"McClain\",\r\n    \"username\": \"altcgeymervill@yandex.ru\",\r\n    \"password\": \"1234\",\r\n    \"passwordConfirmation\": \"1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/registration",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": [
						{
							"name": "Peter registration Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"John\",\r\n    \"lastName\": \"McClain\",\r\n    \"username\": \"altcgeymervill@yandex.ru\",\r\n    \"password\": \"1234\",\r\n    \"passwordConfirmation\": \"1234\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/auth/registration",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"auth",
										"registration"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 12 Dec 2023 05:20:19 GMT"
								},
								{
									"key": "Connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"User already exists.\",\n    \"errors\": null\n}"
						}
					]
				},
				{
					"name": "Logining exsisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Get accessToken user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql('johndoe@mail.ru');\r",
									"    pm.expect(jsonData.accessToken).to.exist;\r",
									"})\r",
									"\r",
									"pm.test('Get refreshToken user', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql('johndoe@mail.ru');\r",
									"    pm.expect(jsonData.refreshToken).not.null;\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"access_token\",jsonData.accessToken);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"johndoe@mail.ru\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}api/v1/auth/login",
							"host": [
								"{{base_url}}api"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Logining exsisting user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"johndoe@mail.ru\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/api/v1/auth/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 12 Dec 2023 04:40:38 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"username\": \"johndoe@mail.ru\",\n    \"accessToken\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqb2huZG9lQG1haWwucnUiLCJpZCI6MSwicm9sZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJleHAiOjE3MDIzNTk2Mzh9.4eKk0MGmelJ7l6VVTW3rhEV9JQo7xS1ACie9ifPd-mfC52sjcslL5i6SR6DQiDYVJN1H495QadnVEVC1gplbJQ\",\n    \"refreshToken\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqb2huZG9lQG1haWwucnUiLCJpZCI6MSwiZXhwIjoxNzA0OTQ4MDM4fQ.WTLrVUoySmUjBCngQgyEyZ4Rdfg5lbeKfHQ4KZYBmkrBhBvBBRvuqicNuc6iuqZK7PDP4lHamzIt-LdrfU-v9w\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ENV_access_bearer_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth",
			"value": "auth",
			"disabled": true
		},
		{
			"key": "access_bearer_token_tms",
			"value": "",
			"type": "string"
		},
		{
			"key": "base_url_tms",
			"value": "localhost:8080/api/v1/",
			"type": "string"
		},
		{
			"key": "refresh_bearer_token_tms",
			"value": "",
			"type": "string"
		},
		{
			"key": "parker_id_tms",
			"value": "",
			"type": "string"
		},
		{
			"key": "last_added_task_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "first_added_task_id",
			"value": "",
			"type": "string"
		}
	]
}